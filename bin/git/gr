#!/bin/bash

# set -o errexit	# set -e
# set -o nounset	# set -u

renice --priority 19 --pid $$ > /dev/null
ionice --class 3     --pid $$ > /dev/null

DIRS=""
DATA_FILE="git.txt"

function title2()
{
	type title >& /dev/null || return 0
	title "$@"
}

function log()
{
	echo -e "\e[32m$1\e[0m"
}

function usage()
{
	echo "Usage:"
	echo "    ${0##*/} [pull|push|{fetch|f}|{status|st|s}|clean|{tidy|t}|clone|wipe|redate|{remote|r}]"
	exit 1
}

function get_dirs()
{
	local i
	local dir_list="$(find . -type d -name .git | LANG=C sort | cut -b3-)"
	for i in $dir_list; do
		[ "$i" = ".git" ] && i=.
		DIRS="$DIRS ${i%/*}"
	done
	DIRS="$DIRS $(find . -type d -name "?*.git" | LANG=C sort | cut -b3-)"

	local HERE=$(pwd)
	if [[ "$HERE" =~ \.git$ ]]; then
		DIRS="$DIRS ."
	fi
}

function git_fetch()
{
	local i
	for i in $DIRS; do
		title2 git fetch $i
		log $i
		pushd $i > /dev/null
		[ -n "$(git remote)" ] && git fetch origin master:master
		popd > /dev/null
	done
}

function git_push()
{
	local i
	for i in $DIRS; do
		title2 git push $i
		log $i
		pushd $i > /dev/null
		[ -n "$(git remote)" ] && git push
		popd > /dev/null
	done
}

function git_pull()
{
	local i
	for i in $DIRS; do
		title2 git pull $i $@
		log $i
		pushd $i > /dev/null
		if [ -n "$(git remote)" ]; then
			BARE="$(git config --get core.bare)"
			if [ "$BARE" = "true" ]; then
				git fetch origin master:master
			else
				git fetch --quiet
				MASTER=$(git rev-parse HEAD)
				FETCH=$(git rev-parse FETCH_HEAD)
				if [ $MASTER != $FETCH ]; then
					BRANCH=$(git branch | sed -n '/*/{s/^\* //;p}')
					git --no-pager log --branches --graph --pretty="%Cred%h%Creset %s %Cgreen(%ar)%Creset%C(yellow)%d%Creset" $BRANCH^1..FETCH_HEAD
					git merge --ff --quiet FETCH_HEAD
				fi
			fi
		fi
		popd > /dev/null
	done
}

function git_status()
{
	local i
	for i in $DIRS; do
		title2 git status $i
		log $i
		pushd $i > /dev/null
		BARE="$(git config --get core.bare)"
		if [ "$BARE" = "false" ]; then
			git stash list
			git status -s
		fi
		popd > /dev/null
	done
}

function git_clean()
{
	local i
	local SURE
	read -p "Are you sure [y/N]?" -t 3 -n 1 SURE
	echo
	[ "$SURE" != "y" ] && return
	for i in $DIRS; do
		title2 git clean $i
		log $i
		pushd $i > /dev/null
		git clean -dxf
		popd > /dev/null
	done
}

function git_tidy()
{
	local i
	for i in $DIRS; do
		title2 git tidy $i
		log $i
		pushd $i > /dev/null
		git fsck --full --strict
		git gc #--aggressive
		git prune
		[ -d .git ] && cd .git
		rm -f COMMIT_EDITMSG
		rm -f FETCH_HEAD
		rm -f gitk.cache
		rm -f GIT_COLA_MSG
		rm -f hooks/*.sample
		rm -f info/exclude
		rm -f ORIG_HEAD
		rm -f qgit_cache.dat
		rm -fr rr-cache
		rm -fr logs
		find refs/ -mindepth 1 -delete
		chmod -x config
		popd > /dev/null
	done
}

function git_clone()
{
	cat "$DATA_FILE" | while read DIR GIT; do
		if [ -d $DIR ]; then
			echo $DIR already exists
		else
			title2 git clone $DIR
			log $DIR
			git clone $GIT $DIR
		fi
	done
}

function git_wipe()
{
	local i
	local SURE
	read -p "Are you sure [y/N]?" -t 3 -n 1 SURE
	echo
	[ "$SURE" != "y" ] && return
	for i in $DIRS; do
		title2 git wipe $i
		log $i
		rm -fr $i
	done
}

function git_redate()
{
	local i
	for i in $DIRS; do
		title2 git redate $i
		log $i
		pushd $i > /dev/null
		find . -name .git -prune -o \( ! -type l -print \) | while IFS="" read i; do touch -d "$(git log --format="%cd" -n1 --date=iso $i)" $i; done
		popd > /dev/null
	done
}

function git_remote()
{
	local i
	for i in $DIRS; do
		title2 git remote $i
		pushd $i > /dev/null
		local REMOTE=$(git remote -v | awk '/(push)/{ printf ("\t%s\n", $2); }')
		if [ -n "$REMOTE" ]; then
			log $i
			echo "$REMOTE"
		fi
		popd > /dev/null
	done
}

function git_diff()
{
	local i
	for i in $DIRS; do
		title2 git diff $i
		pushd $i > /dev/null
		local DIFF=$(git diff --color "$@")
		if [ -n "$DIFF" ]; then
			log $i
			echo "$DIFF"
		fi

		popd > /dev/null
	done
}


get_dirs

ARG="${1:-}"

case $ARG in
	push)
		git_push ;;
	pull)
		shift
		git_pull "$@" ;;
	fetch|f)
		git_fetch ;;
	status|st|s)
		git_status ;;
	clean)
		git_clean ;;
	tidy|t)
		git_tidy ;;
	clone)
		git_clone ;;
	wipe)
		git_wipe ;;
	redate)
		git_redate ;;
	remote|r)
		git_remote ;;
	diff|d)
		shift
		git_diff "$@" ;;
	ds)
		shift
		git_diff --stat "$@" ;;
	*)
		usage ;;
esac

title2

