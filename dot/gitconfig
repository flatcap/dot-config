[advice]
	statusHints = false
	detachedHead = false

[alias]
	ahead    = "!f() { git branch --verbose --verbose --color | grep --color=never -e ahead -e behind | green 'ahead [0-9]\\+' | red 'behind [0-9]\\+'; }; f"
	b        = "!f() { git branch --verbose --verbose --color \"$@\" | green 'ahead [0-9]\\+' | red 'behind [0-9]\\+' | reverse 'gone'; }; f"
	bd       = "!f() { git branch --verbose --verbose --sort=-committerdate --color \"$@\" | head -20 | green 'ahead [0-9]\\+' | red 'behind [0-9]\\+' | reverse 'gone'; }; f"
	bda      = "!f() { git branch --verbose --verbose --sort=-committerdate --color \"$@\" | green 'ahead [0-9]\\+' | red 'behind [0-9]\\+' | reverse 'gone'; }; f"
	bg       = branch --remote --list 'github/devel/*'
	bo       = branch --remote --list 'origin/devel/*'
	; bd       = !git branch --merged | grep -v \"*\" | xargs -n1 git branch -d
	bn       = rev-parse --abbrev-ref --symbolic-full-name HEAD
	bl       = for-each-ref --format='%(refname:short)' refs/heads/
	co       = checkout
	cp       = cherry-pick
	cp1      = "!f() { git cherry-pick ${1:-HEAD}~..${1:-HEAD} \"$@\"; }; f"
	d        = diff
	dm       = diff master
	d0       = diff -U0
	d1       = "!f() { git diff ${1:-HEAD}~..${1:-HEAD} \"$@\"; }; f"
	ds1      = "!f() { git diff --stat ${1:-HEAD}~..${1:-HEAD} \"$@\"; }; f"
	dc       = diff --cached
	ds       = diff --stat
	dsm      = diff --stat master
	dl       = "!f() { cd ${GIT_PREFIX:-.}; git diff --name-only --relative | xargs --no-run-if-empty \"$@\"; }; f"
	dl1      = "!f() { cd ${GIT_PREFIX:-.}; git diff --name-only --relative ${1:-HEAD}~..${1:-HEAD}; }; f"
	dc       = diff --cached
	f        = fetch --no-tags
	fa       = fetch --all --no-tags --prune
	fp       = format-patch --no-signature
	fp1      = "!f() { git format-patch --no-signature ${1:-HEAD}~..${1:-HEAD}; }; f"
	fpm      = format-patch --no-signature master..
	dc       = diff --cached
	initm    = "!f() { cd ${GIT_PREFIX:-.}; git init --template= && git commit --allow-empty --message \"$*\"; }; f"
	; j        = jump diff
	j        = jump merge
	lca      = "!f() { git merge-base ${1:-master} ${2:-HEAD} | cut -b-7; }; f"
	neo      = "!f() { git clone -s ~/neomutt.git ${1:-neo}; cd ${1:-neo}; git remote add github https://github.com/neomutt/neomutt; }; f"
	mutt     = "!f() { git clone --ref ~/neomutt.git https://github.com/neomutt/upstream-mutt ${1:-mutt}; cd ${1:-mutt}; git remote rename origin github; git map default; }; f"
	p        = push
	pr       = "!f() { git remote | xargs -n1 git push --verbose --tags; }; f"
	r        = remote --verbose
	sl       = shortlog --numbered --summary
	slm      = shortlog --numbered --summary master..
	t        = tag
	tidy     = "!f() { git fsck --full --strict; git gc --aggressive; git prune; }; f"
	u        = "!f() { git rev-parse --abbrev-ref --symbolic-full-name $1@{u}; }; f"
	upstream = "!f() { git rev-parse --abbrev-ref --symbolic-full-name $1@{u}; }; f"

	origin   = "!f() { git remote add origin ~/neomutt.git; git remote --verbose; }; f"
	github   = "!f() { if [ -n \"$1\" ]; then USER=$1; REMOTE=${1,,}; REMOTE=${REMOTE//-}; else USER=neomutt; REMOTE=github; fi; git remote add $REMOTE https://github.com/$USER/neomutt; git remote --verbose; }; f"

	good     = bisect good
	bad      = bisect bad

	; grep-all = "!f() { cd ${GIT_PREFIX:-.}; STRING=\"$1\"; shift; git rev-list --all | xargs -r -I{} git grep -e \"$STRING\" {} -- \"$@\"; }; f"
	; mkobject = hash-object --stdin -w

	# add
	a        = "!f() { cd ${GIT_PREFIX:-.}; git add \"${@:-.}\"; }; f"
	ap       = add --patch
	unstage  = reset HEAD --

	# commit
	; aa       = commit --amend --all --verbose
	aa       = commit --amend --all
	amend    = commit --amend
	ce       = commit --allow-empty
	cam      = "!f() { git commit --all --message \"$*\"; }; f"
	camp     = "!f() { git commit --all --message \"$*\"; X=$(git remote); [ -n \"$X\" ] && git push; }; f"
	cm       = "!f() { git commit --message \"$*\"; }; f"

	# hiding
	hidden   = "!f() { git ls-files -v | sed -n '/^[a-z]/{s/^..//;p}'; }; f"
	hide     = "!f() { git update-index --assume-unchanged \"$@\"; }; f"
	unhide   = "!f() { git update-index --no-assume-unchanged \"$@\"; }; f"

	# logs
	; l        = log --branches --graph --pretty=tidy -n 20
	; lg       = log --graph --pretty=tidy -n 20
	; l        = log --graph --pretty=tidy origin/mutt/1.5.24^..
	; l        = log --branches --graph --pretty=tidy base^..
	; l        = log --pretty=tidyd -n 20
	; l        = log --branches --graph --pretty=tidy origin/mutt/1.5.24^..
	; l        = log --branches --graph --format=tidy -n 20
	; l1       = log --oneline --graph
	l1       = log --oneline
	; ll       = log --branches --graph --format=tidy
	ll       = log --branches --graph --format=tidy
	lt       = log --format=tidy
	ltm      = log --format=tidy master..
	ltu      = "!f() { git log --format=tidy $(git upstream)..; }; f"
	lt1      = "!f() { git log --format=tidy ${1:-HEAD} -n1 \"$@\"; }; f"
	log1     = "!f() { git log ${1:-HEAD} -n1 \"$@\"; }; f"
	logm     = log master..
	lg       = log --format=tidy --graph
	lgm      = log --format=tidy --graph master..
	; lt       = log --format=tidy master.. --reverse
	ln       = log --graph --format=named
	lnm      = log --graph --format=named master..
	lq       = log --format=quiet
	lqm      = log --format=quiet master..
	ls       = log --stat
	lsm      = log --stat master..
	since    = log --branches --graph --format=tidy --since
	when     = log --format=tidy --diff-filter=A

	# rebase
	# --preserve-merges
	rb       = rebase --committer-date-is-author-date
	rbm      = rebase --committer-date-is-author-date master
	ri       = rebase --committer-date-is-author-date --interactive --autosquash
	rim      = rebase --committer-date-is-author-date --interactive --autosquash master
	fix      = "!f() { SEARCH=\"$1\"; shift; git commit --fixup  $(git log -n 1 --format='%h' --grep \"^$SEARCH\") \"$@\"; }; f"
	sq       = "!f() { SEARCH=\"$1\"; shift; git commit --squash $(git log -n 1 --format='%h' --grep \"^$SEARCH\") \"$@\"; }; f"

	# stash
	pop      = stash pop
	save     = stash save

	# status
	bs       = "!f() { git branch --verbose --verbose; git stash list; git status --short; }; f"
	s        = "!f() { git stash list; git status --short \"$@\"; }; f"
	sb       = "!f() { git show-branch --sha1-name $([ $# = 1 ] && echo '--current') \"$@\"; }; f"
	sbm      = "!f() { git show-branch --sha1-name --current master \"$@\"; }; f"
	st       = status
	stats    = "!f() { W=$(git rev-list --count --max-age $(date -d \"-1 week\" +%s) HEAD); M=$(git rev-list --count --max-age $(date -d \"-1 month\" +%s) HEAD); A=$(git rev-list --count HEAD); echo $W/$M/$A commits; }; f"

	# git-repo
	bb       = repo bb
	hub      = repo hub

[clean]
	requireforce = no

[color "branch"]
	current  = 47
	local    = white
	remote   = 123
	upstream = 214
	plain    = white
	ui       = always

[color "diff"]
	meta       = 47
	frag       = 123
	old        = 204
	new        = 228
	whitespace = 204 reverse

[color "status"]
	header    = white
	added     = 228
	changed   = 47
	untracked = 123
	branch    = 47
	nobranch  = 204 reverse
	unmerged  = 204

[color]
	branch = auto
	diff   = auto
	status = auto

[commit]
	template = ~/.gitmessage
	verbose  = false

[core]
	# whitespace     = blank-at-eol,space-before-tab,indent-with-non-tab,tabwidth=8,-blank-at-eof
	whitespace     = -blank-at-eol,-space-before-tab,-blank-at-eof
	# pager          = "less -eFfiqrX"
	pager          = diff-so-fancy | less --tabs=8 -RFX
	preloadindex   = true
	attributesfile = ~/.gitattributes
	excludesfile   = ~/.gitignore

[diff "dosini"]
	xfuncname = "^(\\[.*\\])$"

[diff "identify"]
	textconv = identify -verbose
	cachetextconv = true

[diff "nodiff"]
	command = /bin/true

[diff "openssl"]
	textconv = diff-filter-openssl

[diff "xz"]
	textconv = xz --decompress --stdout

[diff "manual"]
	xfuncname = "^(<(sect[0-9]|chapter|example|table) .*)"

[diff "markdown"]
	xfuncname = "^(#+ .*)"

[difftool]
	prompt = no

[diff]
	mnemonicprefix      = true
	tool                = vimdiff
	guitool             = vimdiff
	compactionHeuristic = true

[filter "patches"]
	# clean = cat
	clean = sed -e 's/\\<[0-9]\\{8\\}\\>/UNKNOWN/'
	smudge = sed -e 's/UNKNOWN/'$(date "+%Y%m%d/")

[filter "serial"]
	clean = sed -e 's/\\<[0-9]\\{10\\}\\>/1970010101/'
	smudge = cat

[filter "openssl"]
	smudge = smudge-filter-openssl
	clean = clean-filter-openssl

[filter "tabspace2"]
	smudge = unexpand --tabs=2 --first-only
	clean = expand --tabs=2 --initial

[github]
	user  = flatcap
	token = 87f49c3aebb08f1add7b59c1e3f57cd0

[gpg]
	program = gpg2

[grep]
	# lineNumber = true
	extendedRegexp = true

[help]
	autocorrect = 0

[include]
	# path = ~/.gitconfig-private

[init]
	# templatedir = ~/.git_template

[interactive]
	singlekey = true

[log]
	abbrevCommit = true
	date = relative
	mailmap = true

[mailmap]
	file = ~/.gitmailmap

[merge]
	branchdesc  = true
	ff          = true
	guitool     = vimdiff
	log         = 999
	renormalize = true
	stat        = false
	tool        = vimdiff

[merge "ours"]
	name = Always keep ours during merge
	driver = merge-keep-ours.sh %O %A %B

[merge "theirs"]
	name = Always keep theirs during merge
	driver = merge-keep-theirs.sh %O %A %B

[merge "patches"]
	name = Concatenate PATCHES
	driver = git-merge-patches-sort %P %A %B

[merge "manual"]
	name = Merge XML manual
	driver = git-merge-manual %O %A %B %P

[mergetool]
	prompt = false

; [pager]
; 	diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '

[pretty]
	tidy   = %C(204)%h%Creset %s %C(47)(%ar)%Creset%C(228)%d%Creset
	quiet  = %C(204)%h%Creset %s
	nodec  = %C(204)%h%Creset %s %C(47)(%ar)%Creset
	nodate = %C(204)%h%Creset %s%C(white dim)%d%Creset
	dtidy  = %C(204)%h%Creset %s %C(47)(%ad)%Creset%C(228)%d%Creset
	; named  = %C(204)%h%Creset %s %C(47)(%ar)%Creset%C(228)%d%Creset %C(white dim)%aN <%aE>%Creset
	; named  = %C(204)%h%Creset %s -- %C(white dim)%aN <%aE>%Creset
	sdate  = %C(204)%h%Creset %C(47)%ad%Creset %s
	sndate = %C(204)%h%Creset %C(47)%ad%Creset %C(white dim)%aN <%aE>%Creset %s

	named = %C(204)%h%Creset %s %C(white dim)(%aN)%Creset
	column = %C(204)%h% C(white dim)%<(12,trunc)%aN%Creset %s

[push]
	default = matching

[rebase]
	autosquash = true

[rerere]
	enabled = true

[url "git@gist.github.com:/"]
	insteadOf = "gist:"
	pushInsteadOf = "https://gist.github.com/"

[url "git://github.com/"]
	insteadOf = "gh:"

[url "git@github.com:flatcap/"]
	insteadOf = "rich:"
	pushInsteadOf = "https://github.com/flatcap/"

[url "git@github.com:"]
	pushInsteadOf = "https://github.com/"

[user]
	email      = "rich@flatcap.org"
	name       = "Richard Russon"
	signingkey = "Richard Russon (NeoMutt) <rich@flatcap.org>"

; [remote "github"]
; 	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
