#!/bin/bash

# Defaults:
#	PROMPT_CFG_COLOUR	no
#	PROMPT_CFG_DIR		yes
#	PROMPT_CFG_DIR_TYPE	abbr
#	PROMPT_CFG_GIT		no
#	PROMPT_CFG_GIT_ABBR	no
#	PROMPT_CFG_TITLE	no
#	PROMPT_CFG_IDENT	yes
#	PROMPT_CFG_USER		no

# Git
# 	State		Abbr	Colour
#	--------------------------------
#	clean		.	green
#	untracked	+	yellow
#	dirty		*	red

# Directory
#	abbr	"~/todo"
#	full	"/home/flatcap/todo"
#	mini	"todo"

# Identifier
#	"# "
#	"$ "

function __get_git_top_level()
{
	local d=$(pwd)
	while [ -n "$d" ]; do
		if [ -d "$d"/.git ]; then
			echo "$d"
			break
		fi
		d=${d%/*}
	done
}

function __get_git_branch()
{
	local git_status="$(git status -unormal 2>&1)"
	if [[ "$git_status" =~ "On branch "([^[:space:]]+) ]]; then
		echo "${BASH_REMATCH[1]}"
	fi
}

function __get_project()
{
	local project="$(__get_git_top_level)"
	local branch="$(__get_git_branch)"
	project="${project##*/}"
	project="${project%-$branch}"
	echo "$project"
}

function __ssh_ip()
{
	[ -n "$SSH_CONNECTION" ] || return

	local PARTS=($SSH_CONNECTION)

	echo ${PARTS[2]}
}


function __local_machine()
{
	[ -z "$SSH_CONNECTION" ]
}

function __virtual_machine()
{
	if [ -n "$SSH_CONNECTION" ]; then
		local IP=$(__ssh_ip)
		[[ $IP =~ 10.0.0.*|192.168.122.* ]]
		return
	fi
	grep -q "^flags.* acpi .*" /proc/cpuinfo
	return $((1-$?))
}


function __prompt_user()
{
	local cfg_user="${PROMPT_CFG_USER:-no}"
	local cfg_colour="${PROMPT_CFG_COLOUR:-no}"
	local prompt=""
	local prompt_colour=""

	[ "$cfg_user" = "yes" ] || return

	if [ "$USER" = "root" ]; then
		prompt="#"
	else
		prompt="${USER^^}"
		prompt="${prompt:0:1}"
	fi
	prompt="[$prompt]"

	if [ "$cfg_colour" = "yes" ]; then
		__virtual_machine && HOSTNAME=dummy.vm.flatcap.org
		case "$HOSTNAME" in
			laptop.flatcap.org)	prompt_colour="32" ;;	# green
			desktop.flatcap.org)	prompt_colour="36" ;;	# cyan
			flatcap.org)		prompt_colour="31" ;;	# red
			*.vm.flatcap.org)	prompt_colour="33" ;;	# yellow
			*)			prompt_colour="35" ;;	# magenta
		esac
		if [ -n "$prompt" ]; then
			prompt="\[\e[${prompt_colour}m\]${prompt}\[\e[0m\]"
		fi
	fi

	echo -n "$prompt"
}

function __prompt_git()
{
	local cfg_git="${PROMPT_CFG_GIT:-no}"
	local cfg_colour="${PROMPT_CFG_COLOUR:-no}"
	local cfg_git_abbr="${PROMPT_CFG_GIT_ABBR:-no}"
	local colour=""
	local state=""

	[ -d "$PWD" ] || return
	[ "$cfg_git" = "yes" ] || return

	local git_status="$(git status -unormal 2>&1)"
	[[ "$git_status" =~ "Not a git repo" ]] && return

	# in a bare directory, make up some plausible reposonse
	[ -f config -a -d refs -a -f HEAD ] && git_status="nothing to commit On branch bare"

	if [[ "$git_status" =~ "nothing to commit" ]]; then
		colour="32"		# green
		if [ "$cfg_colour" = "yes" -o "$cfg_git_abbr" = "yes" ]; then
			state="☆ "
		else
			state=""
		fi
	elif [[ "$git_status" =~ "nothing added to commit but untracked files present" ]]; then
		colour="33"		# yellow
		state="∗ "
	else
		colour="31"		# red
		state="★ "
	fi

	if [[ "$git_status" =~ "On branch "([^[:space:]]+) ]]; then
		branch="${BASH_REMATCH[1]}"
		if [ "$cfg_git_abbr" = "yes" -a \( "$branch" = "master" -o "$branch" = "bare" \) ]; then
			branch="$state"
		else
			[ "$cfg_colour" != "yes" ] && branch="$branch$state"
			branch="($branch)"
		fi
	else
		# Detached HEAD.  (branch=HEAD is a faster alternative.)
		branch="$(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD)"
		branch="${branch##*/}"
		#branch="$(cut -b-7 .git/HEAD)"
		[ "$cfg_colour" != "yes" ] && branch="$branch$state"
		branch="/$branch"
	fi

	if [ "$cfg_colour" = "yes" ]; then
		branch='\[\e['"$colour"'m\]'"$branch"'\[\e[0m\]'
	fi

	echo -n "$branch"
}

function __prompt_dir()
{
	local cfg_dir="${PROMPT_CFG_DIR:-yes}"
	local cfg_dir_type="${PROMPT_CFG_DIR_TYPE:-abbr}"
	local dir=""

	[ $cfg_dir = "yes" ] || return

	if [ -d "$PWD" ]; then
		dir="$(pwd -P)"
	else
		dir="$PWD [deleted]"
	fi

	tilde='~'
	case "$cfg_dir_type" in
		"full")		dir="${dir}"          ;;
		"mini")		dir="${dir##*/}"      ;;
		"work")		if [ -n "$CDDIR" -a "$CDDIR" != "$HOME" ]; then
					ABBR=${CDDIR##*/}
					dir="${dir/$CDDIR/$ABBR}"	# try two substitutions
				fi
				dir="${dir/#$HOME/$tilde}"
				local project="$(__get_project)"
				local branch="$(__get_git_branch)"
				dir="${dir/$project-$branch/$project}" ;;
		"abbr"|*)	dir="${dir/$HOME/$tilde}" ;;
	esac

	echo -n "$dir"
}

function __prompt_ident()
{
	local cfg_ident="${PROMPT_CFG_IDENT:-yes}"
	local ident=""

	[ "$cfg_ident" = "yes" ] || return

	if [[ "$UID" == 0 ]]; then
		ident="# "
	else
		ident="$ "
	fi

	echo -n "$ident"
}

function __prompt_command()
{
	_history_sync
	export PS1="$(__prompt_user)$(__prompt_git)$(__prompt_dir)$(__prompt_ident)"

	local cfg_title="${PROMPT_CFG_TITLE:-no}"
	local hostname="$(hostname)"

	if __virtual_machine; then
		IP=$(__ssh_ip)
		IP=${IP##*.}
		[ -n "$IP" ] && IP=":$IP"
		hostname="{${hostname%%.*}$IP} "
	else
		if [[ $hostname =~ ^laptop.flatcap.org$ ]]; then
			hostname=""
		else
			hostname="{${hostname%%.*}} "
		fi
	fi

	if [ "$cfg_title" = "yes" ]; then
		title "$hostname$(sed -e 's/\\\[[^]]*\\\]//g' -e 's/[$#] $//' <<< "$PS1")"
	fi
	# tell vte our current directory
	__local_machine && [[ $TERM =~ ^xterm ]] && echo -en "\e]7;file://${HOSTNAME:-}$PWD\a"
}


export PROMPT_COMMAND=__prompt_command

