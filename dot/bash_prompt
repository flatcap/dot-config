#!/bin/bash

# Defaults:
#	PROMPT_CFG_COLOUR	no
#	PROMPT_CFG_DIR		yes
#	PROMPT_CFG_DIR_TYPE	abbr
#	PROMPT_CFG_GIT		no
#	PROMPT_CFG_GIT_ABBR	no
#	PROMPT_CFG_TITLE	no
#	PROMPT_CFG_IDENT	yes
#	PROMPT_CFG_USER		no

# Git
# 	State		Abbr	Colour
#	--------------------------------
#	clean		.	green
#	untracked	+	yellow
#	dirty		*	red

# Directory
#	abbr	"~/todo"
#	full	"/home/flatcap/todo"
#	mini	"todo"

# Identifier
#	"# "
#	"$ "

source ~/bin/function/title.sh

function _prompt_user()
{
	local cfg_user="${PROMPT_CFG_USER:-no}"
	local cfg_colour="${PROMPT_CFG_COLOUR:-no}"
	local prompt=""
	local prompt_colour=""

	[ "$cfg_user" = "yes" ] || return

	if [ "$USER" = "root" ]; then
		prompt="#"
	else
		prompt="${USER^^}"
		prompt="${prompt:0:1}"
	fi
	prompt="[$prompt]"

	if [ "$cfg_colour" = "yes" ]; then
		case "$HOSTNAME" in
			"rich.flatcap.org")	prompt_colour="32" ;;	# green
			"www.russon.org")	prompt_colour="31" ;;	# red
			"derwent")		prompt_colour="33" ;;	# yellow
			"enigma.flatcap.org")	prompt_colour="36" ;;	# cyan
			*)			prompt_colour="35" ;;	# magenta
		esac
		if [ -n "$prompt" ]; then
			prompt="\[\e[${prompt_colour}m\]${prompt}\[\e[0m\]"
		fi
	fi

	echo -n "$prompt"
}

function _prompt_git()
{
	local cfg_git="${PROMPT_CFG_GIT:-no}"
	local cfg_colour="${PROMPT_CFG_COLOUR:-no}"
	local cfg_git_abbr="${PROMPT_CFG_GIT_ABBR:-no}"
	local colour=""
	local state=""

	[ "$cfg_git" = "yes" ] || return

	local git_status="$(git status -unormal 2>&1)"
	[[ "$git_status" =~ "Not a git repo" ]] && return

	if [[ "$git_status" =~ "nothing to commit" ]]; then
		colour="32"		# green
		if [ "$cfg_colour" = "yes" -o "$cfg_git_abbr" = "yes" ]; then
			state="."
		else
			state=""
		fi
	elif [[ "$git_status" =~ "nothing added to commit but untracked files present" ]]; then
		colour="33"		# yellow
		state='+'
	else
		colour="31"		# red
		state='*'
	fi

	if [[ "$git_status" =~ "On branch "([^[:space:]]+) ]]; then
		branch="${BASH_REMATCH[1]}"
		if [ "$cfg_git_abbr" = "yes" -a "$branch" = master ]; then
			branch="$state "
		else
			[ "$cfg_colour" != "yes" ] && branch="$branch$state"
			branch="($branch) "
		fi
	else
		# Detached HEAD.  (branch=HEAD is a faster alternative.)
		branch="$(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD)"
		branch="${branch##*/}"
		#branch="$(cut -b-7 .git/HEAD)"
		[ "$cfg_colour" != "yes" ] && branch="$branch$state"
		branch="($branch) "
	fi

	if [ "$cfg_colour" = "yes" ]; then
		branch='\[\e['"$colour"'m\]'"$branch"'\[\e[0m\]'
	fi

	echo -n "$branch"
}

function _propmt_dir()
{
	local cfg_dir="${PROMPT_CFG_DIR:-yes}"
	local cfg_dir_type="${PROMPT_CFG_DIR_TYPE:-abbr}"
	local dir=""

	[ $cfg_dir = "yes" ] || return

	dir="$PWD"
	case "$cfg_dir_type" in
		"full")   dir="${PWD}"          ;;
		"mini")   dir="${PWD##*/}"      ;;
		"abbr"|*) dir="${PWD/#$HOME/~}" ;;
	esac

	echo -n "$dir"
}

function _prompt_ident()
{
	local cfg_ident="${PROMPT_CFG_IDENT:-yes}"
	local ident=""

	[ "$cfg_ident" = "yes" ] || return

	if [[ "$UID" == 0 ]]; then
		ident="# "
	else
		ident="$ "
	fi

	echo -n "$ident"
}

function _prompt_command()
{
	export PS1="$(_prompt_user)$(_prompt_git)$(_propmt_dir)$(_prompt_ident)"

	local cfg_title="${PROMPT_CFG_TITLE:-no}"
	local hostname="$(hostname)"
	if [ "$hostname" = "rich.flatcap.org" ]; then
		hostname=""
	else
		hostname="{$hostname}"
	fi
	if [ "$cfg_title" = "yes" ]; then
		title "$hostname $(sed -e 's/\\\[[^]]*\\\]//g' -e 's/[$#] $//' <<< "$PS1")"
	fi
}


export PROMPT_COMMAND=_prompt_command

